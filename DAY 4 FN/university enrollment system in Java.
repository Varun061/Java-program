import java.util.ArrayList;
import java.util.List;

class Person {
    String name;
    int age;

    Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    @Override
    public String toString() {
        return "Name: " + name + ", Age: " + age;
    }
}

class Student extends Person {
    int studentId;

    Student(String name, int age, int studentId) {
        super(name, age);
        this.studentId = studentId;
    }

    @Override
    public String toString() {
        return super.toString() + ", Student ID: " + studentId;
    }
}

class Professor extends Person {
    String employeeId;

    Professor(String name, int age, String employeeId) {
        super(name, age);
        this.employeeId = employeeId;
    }

    @Override
    public String toString() {
        return super.toString() + ", Employee ID: " + employeeId;
    }
}

class Course {
    String courseName;
    List<Course> prerequisites;
    List<Student> enrolledStudents;

    Course(String courseName) {
        this.courseName = courseName;
        this.prerequisites = new ArrayList<>();
        this.enrolledStudents = new ArrayList<>();
    }

    void addPrerequisite(Course prerequisite) {
        prerequisites.add(prerequisite);
    }

    void enrollStudent(Student student) {
        if (hasCompletedPrerequisites(student)) {
            enrolledStudents.add(student);
            System.out.println("Enrolled student " + student.name + " in course " + courseName);
        } else {
            System.out.println("Cannot enroll student " + student.name + " in course " + courseName +
                    ". Prerequisites not completed.");
        }
    }

    private boolean hasCompletedPrerequisites(Student student) {
        for (Course prerequisite : prerequisites) {
            if (!studentHasCompletedCourse(student, prerequisite)) {
                return false;
            }
        }
        return true;
    }

    private boolean studentHasCompletedCourse(Student student, Course course) {
        // In a real system, you would check if the student has completed the specified course.
        // For simplicity, let's assume all students have completed all prerequisites.
        return true;
    }

    void displayEnrolledStudents() {
        System.out.println("Enrolled students in course " + courseName + ":");
        for (Student student : enrolledStudents) {
            System.out.println("- " + student);
        }
    }
}

public class UniversityEnrollmentSystem {
    public static void main(String[] args) {
        // Create students
        Student student1 = new Student("Alice", 20, 101);
        Student student2 = new Student("Bob", 22, 102);

        // Create professors
        Professor professor1 = new Professor("Dr. Smith", 40, "P001");

        // Create courses
        Course math101 = new Course("Math 101");
        Course physics101 = new Course("Physics 101");
        Course computerScience101 = new Course("Computer Science 101");

        // Set prerequisites for courses
        math101.addPrerequisite(physics101);
        computerScience101.addPrerequisite(math101);

        // Enroll students in courses
        math101.enrollStudent(student1);
        math101.enrollStudent(student2);

        physics101.enrollStudent(student1);

        computerScience101.enrollStudent(student1);
        computerScience101.enrollStudent(student2);

        // Display enrolled students in courses
        math101.displayEnrolledStudents();
        physics101.displayEnrolledStudents();
        computerScience101.displayEnrolledStudents();
    }
}
