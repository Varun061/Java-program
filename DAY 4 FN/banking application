// Define an interface for basic account operations
interface AccountOperations {
    void deposit(double amount);
    void withdraw(double amount);
    double checkBalance();
}

// Abstract class representing a generic bank account
abstract class BankAccount implements AccountOperations {
    String accountNumber;
    String accountHolder;
    double balance;

    BankAccount(String accountNumber, String accountHolder, double balance) {
        this.accountNumber = accountNumber;
        this.accountHolder = accountHolder;
        this.balance = balance;
    }
}

// SavingsAccount class extending BankAccount
class SavingsAccount extends BankAccount {
    double interestRate;

    SavingsAccount(String accountNumber, String accountHolder, double balance, double interestRate) {
        super(accountNumber, accountHolder, balance);
        this.interestRate = interestRate;
    }

    @Override
    public void deposit(double amount) {
        balance += amount;
    }

    @Override
    public void withdraw(double amount) {
        if (balance - amount >= 0) {
            balance -= amount;
        } else {
            System.out.println("Insufficient funds for withdrawal.");
        }
    }

    @Override
    public double checkBalance() {
        return balance;
    }
}

// CheckingAccount class extending BankAccount
class CheckingAccount extends BankAccount {
    double overdraftLimit;

    CheckingAccount(String accountNumber, String accountHolder, double balance, double overdraftLimit) {
        super(accountNumber, accountHolder, balance);
        this.overdraftLimit = overdraftLimit;
    }

    @Override
    public void deposit(double amount) {
        balance += amount;
    }

    @Override
    public void withdraw(double amount) {
        if (balance - amount >= -overdraftLimit) {
            balance -= amount;
        } else {
            System.out.println("Insufficient funds for withdrawal. Exceeds overdraft limit.");
        }
    }

    @Override
    public double checkBalance() {
        return balance;
    }
}

// LoanAccount class extending BankAccount
class LoanAccount extends BankAccount {
    double interestRate;

    LoanAccount(String accountNumber, String accountHolder, double balance, double interestRate) {
        super(accountNumber, accountHolder, balance);
        this.interestRate = interestRate;
    }

    @Override
    public void deposit(double amount) {
        System.out.println("Cannot deposit into a loan account.");
    }

    @Override
    public void withdraw(double amount) {
        System.out.println("Cannot withdraw from a loan account.");
    }

    @Override
    public double checkBalance() {
        return balance;
    }
}

// Main class for testing
public class Main {
    public static void main(String[] args) {
        // Test SavingsAccount
        SavingsAccount savingsAccount = new SavingsAccount("SA123", "John Doe", 1000.0, 0.05);
        savingsAccount.deposit(500.0);
        savingsAccount.withdraw(200.0);
        System.out.println("Savings Account Balance: $" + savingsAccount.checkBalance());

        // Test CheckingAccount
        CheckingAccount checkingAccount = new CheckingAccount("CA456", "Jane Smith", 2000.0, 500.0);
        checkingAccount.deposit(1000.0);
        checkingAccount.withdraw(2500.0);
        System.out.println("Checking Account Balance: $" + checkingAccount.checkBalance());

        // Test LoanAccount
        LoanAccount loanAccount = new LoanAccount("LA789", "Bob Johnson", 5000.0, 0.08);
        loanAccount.deposit(1000.0);
        loanAccount.withdraw(2000.0);
        System.out.println("Loan Account Balance: $" + loanAccount.checkBalance());
    }
}
